// Broadcast Receivers
// Dynamic recivers
// most receivers not work from api 24 (nouget) and totall not work at (oero)

-> creat a new java class and extends BroadcastReceiver
import android.content.BroadcastReceiver;
public class OurExampleBroadcastReceiver extends BroadcastReceiver

-> then override onRecieve() method
@Override
public void onRecieve(Context context, Intent intent){
    // this method will execute when our broadcast receiver is trigger
}

-> go to MainActivity
-> create and init an instance of OurExampleBroadcastReceiver
OurExampleBroadcastReceiver ourReceiver = new OurExampleBroadcastReceiver();

-> override onStart() and onStop()
-> we gonna start listening at onStart() and stop listeneing at onStop()
-> that why we override these two callback
-> we can used appropiate lifecycle callback to handle these events
-> for onStart() so onStop()
-> for onResume() so onPause()
-> for onCreate() so onDestroy()

-> create IntentFilter object
IntentFilter filter = new IntentFilter(ConnectivityManager.CONNECTIVYT_ACTION);

-> if we wanna passed more than on action
IntentFilter filter = new IntentFilter();
filter.addAction(some_action);
filter.addAction(another_action);

-> and then 
registerReceiver(ourReceiver, filter);

-> complete code 'til now
public class MainActivity extends AppCompatActivity{
    
    OurExampleBroadcastReceiver ourReceiver = new OurExampleBroadcastReceiver();

    @Override
    protected void onCreate(Bundle savedInstanceState){
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }

    @Override
    protected void onStart(){
        super.onStart();
        // for only one action
        IntentFilter filter = new IntentFilter(ConnectivityManager.CONNECTIVYT_ACTION);
        // for many actions
        IntentFilter filter = new IntentFilter();
        filter.addAction(some_action);
        filter.addAction(another_action);
        // then register 
        registerReceiver(ourReceiver, filter);
    }

    @Override
    protected void onStop(){
        super.onStop();
        // unregister our broadcast receiver
        unregisterReceiver(ourReceiver);
    }

}

-> then go to OurExampleBroadcastReceiver class
import android.content.BroadcastReceiver;
public class OurExampleBroadcastReceiver extends BroadcastReceiver{
   
    @Override
    public void onRecieve(Context context, Intent intent){
        if(ConnectivityManager.CONNECTIVYT_ACTION.equals(intent.getAction())){
            boolean noConnectivity = intent.getBooleanExtra(
                ConnectivityManager.EXTRA_NO_CONNECTIVITY, false
            );
            if(noConnectivity){
                Toast.makeText(context, "Disconnected", Toast.LENGTH_SHORT).show()
            }else{
                Toast.makeText(context, "Connected", Toast.LENGTH_SHORT).show()
            }
        }
    }
}

